generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  id         String    @id @default(uuid())
  roles_name String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime?
  user       user[]
}

model user {
  id             String           @id @default(uuid())
  roles_id       String
  email          String           @unique
  password       String
  fullname       String
  createdAt      DateTime         @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime?
  customer_emp   customer_emp[]
  d_purchase_emp d_purchase_emp[]
  d_purchase_log d_purchase_log[]
  notification   notification[]
  finance_transaction finance_transaction[]
  employee_commission employee_commission[]
  roles          roles            @relation(fields: [roles_id], references: [id])
  commissions    finance_commission[] @relation("UserCommissions")

  @@index([roles_id])
}

model document {
  id                       String       @id @default(uuid())
  document_type_id         String
  documennt_type           String
  document_key             keyDocument
  createdAt                DateTime     @default(now())
  updatedAt                DateTime?
  deletedAt                DateTime?
  Cabinet_deposit          Boolean
  document_ARRIVAL_NOTICE  Boolean
  document_BILL_OF_LADING  Boolean
  document_DraftBL         Boolean
  document_DraftFE         Boolean
  document_FE              Boolean
  document_INV             Boolean
  document_Invpick         Boolean
  document_PL              Boolean
  document_Slip            Boolean
  document_card            Boolean
  document_certificate     Boolean
  document_customs_receipt Boolean
  document_do              Boolean
  document_draft           Boolean
  document_etc             Boolean
  document_hairy           Boolean
  document_so              Boolean
  document_tracking        Boolean
  document_world20         Boolean
  key                      String
  document_power_attorney  Boolean
  type_master              String?
  documentType             documenttype @relation(fields: [document_type_id], references: [id])

  @@index([document_type_id], map: "document_document_type_id_fkey")
}

model customer {
  id                String            @id @default(uuid())
  cus_fullname      String?
  cus_phone         String?
  cus_line          String?
  cus_website       String?
  cus_etc           String?
  cus_facebook      String?
  cus_wechat        String?
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime?
  cus_age           Int?
  cus_international String?
  cus_sex           String?
  cus_code          String            @unique
  details           customer_detail?
  customer_emp      customer_emp[]
  customer_status   customer_status[]
  d_purchase        d_purchase[]
}

model customer_group {
  id              String           @id @default(uuid())
  group_name      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  customer_detail customer_detail?
}

model customer_detail {
  id              String          @id @default(uuid())
  customer_id     String          @unique
  cd_consider     String?
  cd_typeinout    String?
  cd_custype      String?
  cd_cusservice   String?
  cd_channels     String?
  cd_num          Int?
  cd_capital      String?
  cd_emp          String?
  cd_shareholders String?
  cd_num_saka     String?
  cd_frequency    String?
  cd_leader       String?
  cd_priority     String?
  cd_address      String?
  cd_company      String?
  createdAt       DateTime        @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime?
  cd_department   String?
  status_update   Boolean?        @default(false)
  cd_group_id     String?         @unique
  customer_group  customer_group? @relation(fields: [cd_group_id], references: [id])
  customer        customer        @relation(fields: [customer_id], references: [id])

  @@index([customer_id, cd_group_id])
  @@index([customer_id])
}

model customer_status {
  id          String    @id @default(uuid())
  customer_id String
  cus_status  String
  active      String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime?
  customer    customer  @relation(fields: [customer_id], references: [id])

  @@index([customer_id])
}

model customer_emp {
  id          String    @id @default(uuid())
  customer_id String
  cus_status  String
  active      String
  user_id     String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime?
  customer    customer  @relation(fields: [customer_id], references: [id])
  user        user      @relation(fields: [user_id], references: [id])

  @@index([customer_id])
  @@index([user_id], map: "customer_emp_user_id_fkey")
}

model d_purchase {
  id                          String                        @id @default(uuid())
  book_number                 String                        @unique
  customer_number             String?
  customer_id                 String                        @default("")
  d_route                     String?
  d_transport                 String?
  d_term                      String?
  d_origin                    String?
  d_destination               String?
  d_size_cabinet              String?
  d_weight                    String?
  d_address_origin            String?
  d_address_destination       String?
  d_refund_tag                String?
  d_truck                     String?
  d_etc                       String?
  d_shipment_number           String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime?
  deletedAt                   DateTime?
  d_status                    String?
  d_emp_look                  String?                       @default("")
  d_end_date                  DateTime?
  d_group_work                String?                       @default("")
  t_group_work                String?
  d_num_date                  String?
  d_address_destination_la    String?
  d_address_destination_long  String?
  d_address_origin_la         String?
  d_address_origin_long       String?
  d_purchase_ref              String?
  date_cabinet                String?
  link_d_destination          String?
  link_d_origin               String?
  is_update_emp               Boolean?                      @default(false)
  input_etc                   String?
  cs_purchase                 cs_purchase[]
  d_agentcy                   d_agentcy[]
  d_confirm_purchase          d_confirm_purchase[]
  d_document                  d_document[]
  d_payment_type              d_payment_type[]
  d_product                   d_product?
  d_product_image             d_product_image[]
  customer                    customer                      @relation(fields: [customer_id], references: [id])
  d_purchase_customer_payment d_purchase_customer_payment[]
  d_purchase_emp              d_purchase_emp[]
  d_purchase_log              d_purchase_log[]
  d_purchase_status           d_purchase_status[]
  d_sale_agentcy              d_sale_agentcy[]
  payment_purchase            payment_purchase[]
  purchase_finance            purchase_finance[]
  employee_commission         employee_commission[]
  cs_department_commission    cs_department_commission[]

  @@index([customer_id])
}

model d_confirm_purchase {
  id                      String                    @id @default(uuid())
  d_purchase_id           String
  type_confirm            String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?
  deletedAt               DateTime?
  d_purchase              d_purchase                @relation(fields: [d_purchase_id], references: [id])
  d_confirm_purchase_file d_confirm_purchase_file[]

  @@index([d_purchase_id], map: "d_confirm_purchase_d_purchase_id_fkey")
}

model d_confirm_purchase_file {
  id                 String             @id @default(uuid())
  d_confirm_id       String
  file_name          String
  file_path          String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  d_confirm_purchase d_confirm_purchase @relation(fields: [d_confirm_id], references: [id])

  @@index([d_confirm_id], map: "d_confirm_purchase_file_d_confirm_id_fkey")
}

model d_purchase_status {
  id            String        @id @default(uuid())
  status_name   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  active        Boolean
  d_purchase_id String
  status_key    String
  d_purchase    d_purchase    @relation(fields: [d_purchase_id], references: [id])
  master_status master_status @relation(fields: [status_key], references: [status_key])

  @@index([d_purchase_id], map: "d_purchase_status_d_purchase_id_fkey")
  @@index([status_key], map: "d_purchase_status_status_key_fkey")
}

model d_purchase_emp {
  id            String     @id @default(uuid())
  d_purchase_id String
  user_id       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  is_active     Boolean    @default(true)
  d_purchase    d_purchase @relation(fields: [d_purchase_id], references: [id])
  user          user       @relation(fields: [user_id], references: [id])

  @@index([d_purchase_id])
  @@index([user_id], map: "d_purchase_emp_user_id_fkey")
}

model d_payment_type {
  id            String     @id @default(uuid())
  d_purchase_id String
  payment_type  String?
  payment_name  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  d_purchase    d_purchase @relation(fields: [d_purchase_id], references: [id])

  @@index([d_purchase_id], map: "d_payment_type_d_purchase_id_fkey")
}

model d_payment_customer_type {
  id             String    @id @default(uuid())
  d_payment_type String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
}

model d_purchase_customer_payment {
  id                 String     @id @default(uuid())
  d_purchase_id      String
  payment_name       String
  payment_date       DateTime
  payment_price      String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  payment_image_name String
  payment_path       String
  payment_type       String
  d_purchase         d_purchase @relation(fields: [d_purchase_id], references: [id])

  @@index([d_purchase_id], map: "d_purchase_customer_payment_d_purchase_id_fkey")
}

model d_product {
  id                 String            @id @default(uuid())
  d_product_name     String?
  d_purchase_id      String            @unique
  review_date        DateTime?
  performance_rating DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  d_purchase         d_purchase        @relation(fields: [d_purchase_id], references: [id])
  d_product_image    d_product_image[]

  @@index([d_purchase_id])
}

model d_product_image {
  id                   String     @id @default(uuid())
  d_product_id         String
  d_purchase_id        String
  d_product_image_name String?
  d_active             Boolean?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  d_product_type       String?
  d_product            d_product  @relation(fields: [d_product_id], references: [id])
  d_purchase           d_purchase @relation(fields: [d_purchase_id], references: [id])

  @@index([d_product_id, d_purchase_id])
  @@index([d_purchase_id], map: "d_product_image_d_purchase_id_fkey")
}

model d_document {
  id              String            @id @default(uuid())
  d_purchase_id   String
  d_document_name String
  d_document_key  String
  d_document_etc  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  d_purchase      d_purchase        @relation(fields: [d_purchase_id], references: [id])
  d_document_file d_document_file[]

  @@index([d_purchase_id], map: "d_document_d_purchase_id_fkey")
}

model d_document_file {
  id            String     @id @default(uuid())
  d_document_id String
  file_name     String
  file_path     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  d_document    d_document @relation(fields: [d_document_id], references: [id])

  @@index([d_document_id], map: "d_document_file_d_document_id_fkey")
}

model d_purchase_log {
  id            String     @id @default(uuid())
  d_purchase_id String
  user_id       String
  role_id       String?
  log_type      String?
  log_text      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  d_purchase    d_purchase @relation(fields: [d_purchase_id], references: [id])
  user          user       @relation(fields: [user_id], references: [id])

  @@index([d_purchase_id], map: "d_purchase_log_d_purchase_id_fkey")
  @@index([user_id], map: "d_purchase_log_user_id_fkey")
}

model agentcy {
  id          String      @id @default(uuid())
  agent_name  String
  agent_phone String
  agent_email String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  d_agentcy   d_agentcy[]
}

model d_agentcy {
  id               String             @id @default(uuid())
  d_purchase_id    String
  agentcy_id       String
  status           Boolean?           @default(false)
  agent_boat       String?
  agentcy_tit      String?
  agentcy_etd      String?
  agentcy_eta      String?
  agentcy_etc      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  agentcy          agentcy            @relation(fields: [agentcy_id], references: [id])
  d_purchase       d_purchase         @relation(fields: [d_purchase_id], references: [id])
  d_agentcy_detail d_agentcy_detail[]
  d_agentcy_file   d_agentcy_file[]
  d_sale_agentcy   d_sale_agentcy[]

  @@index([agentcy_id], map: "d_agentcy_agentcy_id_fkey")
  @@index([d_purchase_id], map: "d_agentcy_d_purchase_id_fkey")
}

model d_agentcy_detail {
  id            String    @id @default(uuid())
  d_agentcy_id  String
  d_purchase_id String
  d_type        String?
  d_type_text   String?
  d_price       String?
  d_nettotal    Int?
  d_discount    String?
  d_net_balance Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  d_currency    String?
  d_typePayer   String?
  d_agentcy     d_agentcy @relation(fields: [d_agentcy_id], references: [id])

  @@index([d_agentcy_id], map: "d_agentcy_detail_d_agentcy_id_fkey")
}

model d_agentcy_file {
  id           String    @id @default(uuid())
  d_agentcy_id String
  file_name    String
  file_path    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  d_agentcy    d_agentcy @relation(fields: [d_agentcy_id], references: [id])

  @@index([d_agentcy_id], map: "d_agentcy_file_d_agentcy_id_fkey")
}

model master_status {
  id                String              @id @default(uuid())
  status_key        String              @unique
  status_name       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  status_color      String?
  d_purchase_status d_purchase_status[]
}

model notification {
  id          String    @id @default(uuid())
  user_id     String
  title       String
  subject_key String
  data        String    @db.LongText
  message     String
  status      Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  link_to     String?
  user        user      @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "notification_user_id_fkey")
}

model payment_purchase {
  id                  String     @id @default(uuid())
  d_purchase_id       String
  payment_type        String
  payment_name        String
  payment_date        DateTime
  payment_price       String
  payment_discount    String
  payment_total_price Int
  createdAt           DateTime   @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  payment_net_balance Int
  payment_currency    String
  d_purchase          d_purchase @relation(fields: [d_purchase_id], references: [id])

  @@index([d_purchase_id], map: "payment_purchase_d_purchase_id_fkey")
}

model d_sale_agentcy {
  id                  String                @id @default(uuid())
  d_agentcy_id        String
  d_purchase_id       String
  status              Boolean?              @default(false)
  d_sale_agentcy_note String?
  d_sale_agentcy_date String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  d_agentcy           d_agentcy             @relation(fields: [d_agentcy_id], references: [id])
  d_purchase          d_purchase            @relation(fields: [d_purchase_id], references: [id])
  d_sale_agentcy_file d_sale_agentcy_file[]

  @@index([d_agentcy_id], map: "d_sale_agentcy_d_agentcy_id_fkey")
  @@index([d_purchase_id], map: "d_sale_agentcy_d_purchase_id_fkey")
}

model d_sale_agentcy_file {
  id              String         @id @default(uuid())
  file_name       String
  file_path       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  d_purchase_id   String
  d_sale_agent_id String
  d_sale_agentcy  d_sale_agentcy @relation(fields: [d_sale_agent_id], references: [id])

  @@index([d_sale_agent_id], map: "d_sale_agentcy_file_d_sale_agent_id_fkey")
}

model waitrelease {
  id                  String               @id @default(uuid())
  cs_purchase_id      String               @unique
  date_planing        String?
  date_receive        String?
  dem_free_time       String?
  demurrage_dem_date  String?
  detention_det_date  String?
  license_plate       String?
  location_exchange   String?
  employee_driver     String?
  phone_number        String?
  terminal_release    String?
  type_car            String?
  company_car         String?
  det_free_time       String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  location_do         String?
  cs_wait_destination cs_wait_destination?
  CS_Purchase         cs_purchase          @relation(fields: [cs_purchase_id], references: [id])
  waitrelease_file    waitrelease_file[]
}

model waitrelease_file {
  id             String      @id @default(uuid())
  waitrelease_id String
  file_name      String
  file_path      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  waitrelease    waitrelease @relation(fields: [waitrelease_id], references: [id])

  @@index([waitrelease_id], map: "waitrelease_file_waitrelease_id_fkey")
}

model cs_inspection {
  id                   String               @id @default(uuid())
  cs_purchase_id       String               @unique
  shipping             String?
  date_release         String?
  date_do              String?
  date_card            String?
  date_return_document String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  CS_Purchase          cs_purchase          @relation(fields: [cs_purchase_id], references: [id])
  cs_inspection_file   cs_inspection_file[]
}

model cs_inspection_file {
  id               String        @id @default(uuid())
  cs_inspection_id String
  file_name        String
  file_path        String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  key              String
  cs_inspection    cs_inspection @relation(fields: [cs_inspection_id], references: [id])

  @@index([cs_inspection_id], map: "cs_inspection_file_cs_inspection_id_fkey")
}

model cs_wait_destination {
  id                       String                     @id @default(uuid())
  cs_purchase_id           String                     @unique
  waitrelease_id           String                     @unique
  date_receiving_cabinet   String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime?
  deletedAt                DateTime?
  CS_Purchase              cs_purchase                @relation(fields: [cs_purchase_id], references: [id])
  waitrelease              waitrelease                @relation(fields: [waitrelease_id], references: [id])
  cs_wait_destination_file cs_wait_destination_file[]
}

model cs_wait_destination_file {
  id                  String              @id @default(uuid())
  wait_destination_id String
  file_name           String
  file_path           String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  cs_wait_destination cs_wait_destination @relation(fields: [wait_destination_id], references: [id])

  @@index([wait_destination_id], map: "cs_wait_destination_file_wait_destination_id_fkey")
}

model cs_already_sent {
  id                   String                 @id @default(uuid())
  cs_purchase_id       String                 @unique
  date_out_arrival     String?
  etc                  String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  CS_Purchase          cs_purchase            @relation(fields: [cs_purchase_id], references: [id])
  cs_already_sent_file cs_already_sent_file[]
}

model cs_already_sent_file {
  id                 String          @id @default(uuid())
  cs_already_sent_id String
  file_name          String
  file_path          String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  cs_already_sent    cs_already_sent @relation(fields: [cs_already_sent_id], references: [id])

  @@index([cs_already_sent_id], map: "cs_already_sent_file_cs_already_sent_id_fkey")
}

model cs_return_cabinet {
  id                     String                   @id @default(uuid())
  cs_purchase_id         String                   @unique
  date_return_cabinet    String?
  cabinet                Boolean?
  date_cabinet           String?
  return_cabinet         Boolean?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  deletedAt              DateTime?
  date_request_return    String?
  price_deposit          String?
  price_repair_cabinet   String?
  price_request_return   String?
  price_return_cabinet   String?
  request_return         Boolean?
  CS_Purchase            cs_purchase              @relation(fields: [cs_purchase_id], references: [id])
  cs_return_cabinet_file cs_return_cabinet_file[]
}

model cs_return_cabinet_file {
  id                String            @id @default(uuid())
  return_cabinet_id String
  file_name         String
  file_path         String
  key               String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  cs_return_cabinet cs_return_cabinet @relation(fields: [return_cabinet_id], references: [id])

  @@index([return_cabinet_id], map: "cs_return_cabinet_file_return_cabinet_id_fkey")
}

model cs_etc {
  id             String      @id @default(uuid())
  cs_purchase_id String      @unique
  etc            String?
  date_etc       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  CS_Purchase    cs_purchase @relation(fields: [cs_purchase_id], references: [id])
}

model bookcabinet {
  id                  String                @id @default(uuid())
  cs_purchase_id      String                @unique(map: "Bookcabinet_cs_purchase_id_key")
  date_receiving      String?
  date_booking        String?
  agentcy_id          String?
  agentcy_etc         String?
  date_entering       String?
  consignee           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  time_entering       String?
  cs_purchase         cs_purchase           @relation(fields: [cs_purchase_id], references: [id], map: "Bookcabinet_cs_purchase_id_fkey")
  bookcabinet_picture bookcabinet_picture[]
}

model bookcabinet_picture {
  id             String      @id @default(uuid())
  bookcabinet_id String
  picture_name   String
  picture_path   String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  bookcabinet    bookcabinet @relation(fields: [bookcabinet_id], references: [id], map: "Bookcabinet_picture_bookcabinet_id_fkey")

  @@index([bookcabinet_id], map: "Bookcabinet_picture_bookcabinet_id_fkey")
}

model contain {
  id              String            @id @default(uuid())
  cs_purchase_id  String            @unique(map: "Contain_cs_purchase_id_key")
  date_booking    String?
  carbon_total    String?
  cmb_total       String?
  nw_total        String?
  gw_total        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  type_contain    String?
  cs_purchase     cs_purchase       @relation(fields: [cs_purchase_id], references: [id], map: "Contain_cs_purchase_id_fkey")
  contain_picture contain_picture[]
  contain_product contain_product[]
}

model contain_picture {
  id           String    @id @default(uuid())
  contain_id   String
  key          String
  picture_name String
  picture_path String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  contain      contain   @relation(fields: [contain_id], references: [id], map: "Contain_picture_contain_id_fkey")

  @@index([contain_id], map: "Contain_picture_contain_id_fkey")
}

model contain_product {
  id             String    @id @default(uuid())
  contain_id     String
  product_name   String
  product_hscode String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  contain        contain   @relation(fields: [contain_id], references: [id], map: "Contain_product_contain_id_fkey")

  @@index([contain_id], map: "Contain_product_contain_id_fkey")
}

model cs_document {
  id                     String             @id @default(uuid())
  cs_purchase_id         String             @unique(map: "Cs_document_cs_purchase_id_key")
  document_invoice_date  String?
  document_packinglist   String?
  document_draft         String?
  document_etc           String?
  document_draft_invoice String?
  document_draft_bl      String?
  document_master_bl     String?
  cs_purchase            cs_purchase        @relation(fields: [cs_purchase_id], references: [id], map: "Cs_document_cs_purchase_id_fkey")
  cs_document_file       cs_document_file[]
}

model cs_document_file {
  id             String      @id @default(uuid())
  cs_document_id String
  key            String
  file_name      String
  file_path      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  cs_document    cs_document @relation(fields: [cs_document_id], references: [id], map: "Cs_document_file_cs_document_id_fkey")

  @@index([cs_document_id], map: "Cs_document_file_cs_document_id_fkey")
}

model cs_purchase {
  id                  String               @id @default(uuid())
  d_purchase_id       String
  status_key          String?
  status_name         String?
  status_active       Boolean?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  number_key          Int?
  bookcabinet         bookcabinet?
  contain             contain?
  cs_already_sent     cs_already_sent?
  cs_document         cs_document?
  cs_etc              cs_etc?
  cs_inspection       cs_inspection?
  d_purchase          d_purchase           @relation(fields: [d_purchase_id], references: [id], map: "CS_Purchase_d_purchase_id_fkey")
  cs_return_cabinet   cs_return_cabinet?
  cs_wait_destination cs_wait_destination?
  leave               leave?
  provedeparture      provedeparture?
  receive             receive?
  waitrelease         waitrelease?

  @@index([d_purchase_id], map: "CS_Purchase_d_purchase_id_fkey")
}

model currency {
  id            String    @id @default(uuid())
  currency_name String
  rate_money    Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
}

model documenttype {
  id             String              @id @default(uuid())
  type_master_id String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  do_key         documenttype_do_key
  do_name        String?
  type_key       String?
  document       document[]
  typemaster     typemaster          @relation(fields: [type_master_id], references: [id], map: "documentType_type_master_id_fkey")

  @@index([type_master_id], map: "documentType_type_master_id_fkey")
}

model leave {
  id                  String      @id @default(uuid())
  cs_purchase_id      String      @unique(map: "Leave_cs_purchase_id_key")
  date_hbl            String?
  date_original_fe    String?
  date_surrender      String?
  date_enter_doc      String?
  file_enter_doc      String?
  date_payment_do     String?
  amount_payment_do   String?
  payment_date        String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  check_price_deposit Boolean?
  price_deposit       String?
  cs_purchase         cs_purchase @relation(fields: [cs_purchase_id], references: [id], map: "Leave_cs_purchase_id_fkey")
  leavefile           leavefile[]
}

model leavefile {
  id        String    @id @default(uuid())
  leave_id  String
  file_name String
  file_path String
  key       String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  leave     leave     @relation(fields: [leave_id], references: [id], map: "Leavefile_leave_id_fkey")

  @@index([leave_id], map: "Leavefile_leave_id_fkey")
}

model provedeparture {
  id               String      @id @default(uuid())
  cs_purchase_id   String      @unique(map: "ProveDeparture_cs_purchase_id_key")
  date_etd         String?
  date_eta         String?
  post_origin      String?
  post_destination String?
  vessel_name      String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  bl_no            String?
  cs_purchase      cs_purchase @relation(fields: [cs_purchase_id], references: [id], map: "ProveDeparture_cs_purchase_id_fkey")
}

model receive {
  id              String            @id @default(uuid())
  cs_purchase_id  String            @unique(map: "Receive_cs_purchase_id_key")
  date_booking    String?
  so_no           String?
  container_no    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  phone_no        String?
  license_plate   String?
  cs_purchase     cs_purchase       @relation(fields: [cs_purchase_id], references: [id], map: "Receive_cs_purchase_id_fkey")
  receive_picture receive_picture[]
}

model receive_picture {
  id           String    @id @default(uuid())
  receive_id   String
  picture_name String
  picture_path String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  receive      receive   @relation(fields: [receive_id], references: [id], map: "Receive_picture_receive_id_fkey")

  @@index([receive_id], map: "Receive_picture_receive_id_fkey")
}

model typemaster {
  id           String         @id @default(uuid())
  type_name    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  documenttype documenttype[]
}

model financial_record {
  id                  String    @id @default(uuid())
  date                DateTime
  title               String
  accountOwner        String    // 'AHYONG' | 'GINNY'
  type                String    // 'PAYMENT' | 'RECEIPT'
  amountRMB           Float
  transferDate        DateTime
  details             String?   @db.Text
  transferSlip        String?   @db.Text

  financial_transaction_id String? 
  // Receipt specific fields
  amountTHB           Float?
  exchangeRate        Float?
  
  // Payment specific fields
  payTo               String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime?
  
  // Relations
}

model purchase_finance {
  id                     String    @id @default(uuid())
  d_purchase_id          String
  
  // ข้อมูลตู้
  container_number       String?
  container_size         String?
  seal_number            String?
  
  // ข้อมูลเรือ
  ship_name              String?
  
  // ข้อมูลท่าเรือ
  port_load              String?
  port_discharge         String?
  
  // ข้อมูลวันที่
  etd_date               String?
  eta_date               String?
  
  // ข้อมูลการเงิน
  billing_code           String?
  billing_amount         String?
  total_before_vat       String?
  vat_amount             String?
  total_after_vat        String?
  has_vat                Boolean? @default(false)
  payment_status         String?
  
  // ความสัมพันธ์กับตาราง
  d_purchase             d_purchase @relation(fields: [d_purchase_id], references: [id])
  payment_prefix         purchase_finance_payment?

  payment_details        finance_payment_detail[]
  china_expenses         purchase_finance_china_expenses?
  thailand_expenses      purchase_finance_thailand_expenses?
  shipping_details       purchase_finance_shipping?
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?

  @@map("purchase_finance")
}

// ข้อมูลค่าใช้จ่ายจีน
model purchase_finance_china_expenses {
  id                     String    @id @default(uuid())
  purchase_finance_id    String    @unique
  
  ch_freight             String?
  ch_exchange_rate       String?
  ch_freight_total       String?
  
  purchase_finance       purchase_finance @relation(fields: [purchase_finance_id], references: [id], onDelete: Cascade)
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
}

// ข้อมูลการชำระเงิน
model purchase_finance_payment {
  id                     String    @id @default(uuid())
  purchase_finance_id    String    @unique
  
  payment_status         String?
  
  // ข้อมูลคืนภาษีจากตู้
  tax_return_checked     Boolean?  @default(false)
  tax_return_amount      String?
  tax_return_date        String?
  
  // ข้อมูลกำไรและค่าบริหารจัดการ
  management_fee         String?
  percentage_fee         String?
  net_profit             String?
  profit_loss            String?
  
  purchase_finance       purchase_finance @relation(fields: [purchase_finance_id], references: [id])
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
}

// ข้อมูลค่าใช้จ่ายไทย
model purchase_finance_thailand_expenses {
  id                     String    @id @default(uuid())
  purchase_finance_id    String    @unique
  
  th_duty                String?
  th_tax                 String?
  th_employee            String?
  th_warehouse           String?
  th_custom_fees         String?
  th_overtime            String?
  th_check_fee           String?
  th_product_account     String?
  th_license_fee         String?
  th_gasoline            String?
  th_hairy               String?
  th_other_fee           String?
  th_shipping_note       String?
  
  // ข้อมูลค่าใช้จ่ายหัวลาก
  th_port_name           String?
  th_port_fee            String?
  th_port_note           String?
  th_lift_on_off         String?
  th_ground_fee          String?
  th_port_other_fee      String?
  th_price_head_tractor  String?
  th_total_port_fee      String?
  
  // ข้อมูลค่าใช้จ่าย D/O
  amount_payment_do      String?
  price_deposit          String?
  
  purchase_finance       purchase_finance @relation(fields: [purchase_finance_id], references: [id], onDelete: Cascade)
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
}

// ข้อมูล Shipping
model purchase_finance_shipping {
  id                     String    @id @default(uuid())
  purchase_finance_id    String    @unique
  
  th_shipping_price      String?
  th_shipping_advance    String?
  th_shipping_remaining  String?
  th_shipping_return_to  String?
  th_total_shipping      String?
  shipping_advance_status String?  // สถานะ Shipping เบิก: เคลียร์ครบแล้ว, ยังไม่ได้เคลียร์, เคลียร์บางส่วน
  
  purchase_finance       purchase_finance @relation(fields: [purchase_finance_id], references: [id], onDelete: Cascade)
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
}

model withdrawalInformaion {
  id                String    @id @default(uuid())
  d_purchase_id     String
  invoice_package   String   
  consignee         String?
  head_tractor      String?
  withdrawal_date   String?
  withdrawal_person String?
  withdrawal_amount String?
  transfer_amount   String?
  transfer_date     String?
  group_id          String?  // To group related withdrawal records
  pay_price         String?
  pay_gasoline      String?
  pay_total         String? //คงเหลือ
  return_people     String? //คืนให้ใคร
  withdrawal_company String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  
}

// Consignment model (ฝากสั่งซื้อ/ฝากเติม)
model finance_exchange {
  id                  String          @id @default(uuid())
  date                DateTime?
  salespersonId       String?
  documentNumber      String?
  customerId          String?
  type                String?
  amountRMB           Float?
  priceDifference     Float?    @default(0)
  exchangeRate        Float?
  fee                 Float?     @default(0)
  amount              Float?       
  productDetails      String?         @db.Text
  orderStatus         String?         @default("PENDING") // PENDING, PROCESSING, COMPLETED
  topupPlatform       String?
  topupAccount        String?
  receivingAccount    String?
  exchangeRateProfit  Float?
  incomePerTransaction Float?
  transferDate        DateTime?
  notes               String?         @db.Text
  transferSlipUrl     String?         @db.Text
  createdAt           DateTime        @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?

  transaction         finance_transaction?
}

// Customer Deposit / Exchange model
model finance_customer_deposit {
  id                    String    @id @default(uuid())
  date                  DateTime?
  salespersonId         String?
  documentNumber        String?
  customerId            String?
  amountRMB             Float?
  priceDifference       Float?     @default(0)
  exchangeRate          Float?
  fee                   Float?     @default(0)
  amount                Float?     
  vat                   Float?     
  totalWithVat          Float?     
  totalDepositAmount    Float?     
  transferDate          DateTime?
  receivingAccount      String?    
  notes                 String?   @db.Text
  transferSlipUrl       String?   @db.Text
  deposit_purpose       String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  transaction           finance_transaction?
}

model finance_transaction {
  id                    String    @id @default(uuid())
  type                  String?
  customerDepositId     String?   @unique
  exchangeId            String?   @unique
  date                  DateTime?
  documentNumber        String?
  customerId            String?
  salespersonId         String?
  amountRMB             Float?
  transferDate          DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  customerDeposit       finance_customer_deposit? @relation(fields: [customerDepositId], references: [id])
  
  exchange              finance_exchange?         @relation(fields: [exchangeId], references: [id])
  user                  user?                     @relation(fields: [salespersonId], references: [id])
}

model finance_customer_account {
  id           String    @id @default(uuid())
  finance_name String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  @@map("finance_customer_account")
}

model finance_company_account {
  id           String    @id @default(uuid())
  company_name String
  bank_name    String
  bank_account String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  @@map("finance_company_account")
}

// Commission Rank model
model commission_rank {
  id           String   @id @default(uuid())
  min_amount   Float
  max_amount   Float
  percentage   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("commission_ranks")
}

// Employee Commission model
model employee_commission {
  id                String   @id @default(uuid())
  d_purchase_id     String
  employee_id       String
  commission_type   String   // "percentage" or "fixed"
  commission_value  Float    // percentage value or fixed amount
  commission_amount Float    // actual commission amount
  status            String   @default("saved") // "saved", "pending", "paid", etc.
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  // Relations
  d_purchase        d_purchase @relation(fields: [d_purchase_id], references: [id])
  employee          user       @relation(fields: [employee_id], references: [id])

  @@index([d_purchase_id])
  @@index([employee_id])
  @@map("employee_commissions")
}

// CS Department Commission model - fixed 300 baht per purchase
model cs_department_commission {
  id                String    @id @default(uuid())
  d_purchase_id     String    @unique
  commission_amount Float     @default(300) // fixed 300 baht per purchase
  is_paid           Boolean   @default(false)
  status            String    @default("saved") // "saved", "pending", "paid", etc.
  paid_date         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime @updatedAt
  d_purchase        d_purchase @relation(fields: [d_purchase_id], references: [id])

  @@index([d_purchase_id])
  @@map("cs_department_commissions")
}

model finance_transfer_type {
  id           String    @id @default(uuid())
  type_name    String    // ประเภท: ฝากสั่ง, ฝากโอน, ฝากเติม
  commission_rate Float   @default(0) // เรทค่าคอม
  is_active    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?
}

model finance_commission {
  id           String    @id @default(uuid())
  transfer_id  String    // ID of the transfer
  employee_id  String    // ID of the salesperson/employee
  amount       Float     // Commission amount
  status       String    @default("PENDING") // PENDING, APPROVED, PAID
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?
  
  // Relations
  employee     user      @relation("UserCommissions", fields: [employee_id], references: [id])

  @@index([transfer_id])
  @@index([employee_id])
}

model finance_payment_detail {
  id                  Int      @id @default(autoincrement())
  purchase_finance_id String  
  payment_date        String?
  payment_amount      String?
  remaining_amount    String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
 
  
  purchase_finance    purchase_finance? @relation(fields: [purchase_finance_id], references: [id])
}

enum keyDocument {
  Document
  License
}

enum documenttype_do_key {
  Car
  BOAT
  AIR
  TRAIN
  TRUCK
}

// Financial record types
enum TransactionType {
  PAYMENT
  RECEIPT
}

// Account owners
enum AccountOwner {
  AHYONG
  GINNY
}
